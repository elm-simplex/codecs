module Orchard.Codecs exposing (codecsFor)

{-| This module provides the public api for serializing and deserializing almost any Elm data type via a custom binary protocol.

@docs codecsFor

-}

import Bytes as B
import Bytes.Decode as D exposing (Decoder)
import Bytes.Encode as E exposing (Encoder)


{-| Generate Binary encoder/decoder pairs for any type, using a densely packed binary protocol. The decoder from this pair is guaranteed to decode values generated by the encoder, but no other guarantees are provided, regarding protocol stability or otherwise.
-}
codecsFor : a -> { encoder : a -> Encoder, decoder : Decoder a }
codecsFor a =
    -- real implementation is provided by the compiler
    { encoder = \_ -> E.sequence []
    , decoder = D.fail
    }
